// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using gestion_de_notes.Data;

#nullable disable

namespace gestion_de_notes.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240809172853_ThirdCreate")]
    partial class ThirdCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("gestion_de_notes.Models.Classe", b =>
                {
                    b.Property<int>("IdClasse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClasse"));

                    b.Property<int>("Groupe")
                        .HasColumnType("int");

                    b.Property<int>("Niveau")
                        .HasColumnType("int");

                    b.Property<string>("NiveauGrp")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdClasse");

                    b.HasIndex("NiveauGrp")
                        .IsUnique();

                    b.ToTable("Classe");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Eleve", b =>
                {
                    b.Property<int>("IdEleve")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEleve"));

                    b.Property<string>("AdresseEleve")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPrenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NumMatricule")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<string>("ParentNumTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdEleve");

                    b.HasIndex("ClasseId");

                    b.HasIndex("Email", "NumMatricule", "NomPrenom")
                        .IsUnique();

                    b.ToTable("Eleve");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Enseigner", b =>
                {
                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.HasKey("ClasseId", "ProfesseurId");

                    b.HasIndex("ProfesseurId");

                    b.ToTable("Enseigner");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Examen", b =>
                {
                    b.Property<int>("IdExamen")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExamen"));

                    b.Property<DateTime>("DebutSession")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FinSesssion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Session")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdExamen");

                    b.HasIndex("Session")
                        .IsUnique();

                    b.ToTable("Examen");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Maitriser", b =>
                {
                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.Property<int>("MatiereId")
                        .HasColumnType("int");

                    b.HasKey("ProfesseurId", "MatiereId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Maitriser");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Matiere", b =>
                {
                    b.Property<int>("IdMatiere")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMatiere"));

                    b.Property<string>("NomMatiere")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("IdMatiere");

                    b.HasIndex("NomMatiere")
                        .IsUnique();

                    b.ToTable("Matiere");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Note", b =>
                {
                    b.Property<int>("EleveId")
                        .HasColumnType("int");

                    b.Property<int>("ProfesseurId")
                        .HasColumnType("int");

                    b.Property<int>("MatiereId")
                        .HasColumnType("int");

                    b.Property<int>("ExamenId")
                        .HasColumnType("int");

                    b.Property<double>("NoteEleve")
                        .HasPrecision(3)
                        .HasColumnType("float(3)");

                    b.HasKey("EleveId", "ProfesseurId", "MatiereId", "ExamenId");

                    b.HasIndex("ExamenId");

                    b.HasIndex("MatiereId");

                    b.HasIndex("ProfesseurId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Posseder", b =>
                {
                    b.Property<int>("ClasseId")
                        .HasColumnType("int");

                    b.Property<int>("MatiereId")
                        .HasColumnType("int");

                    b.Property<int>("Coefficient")
                        .HasColumnType("int");

                    b.HasKey("ClasseId", "MatiereId");

                    b.HasIndex("MatiereId");

                    b.ToTable("Posseder");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Professeur", b =>
                {
                    b.Property<int>("IdProfesseur")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProfesseur"));

                    b.Property<string>("AdresseProf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MatiereIdMatiere")
                        .HasColumnType("int");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomPrenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NumTel")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdProfesseur");

                    b.HasIndex("MatiereIdMatiere");

                    b.HasIndex("NumTel", "NomPrenom")
                        .IsUnique();

                    b.ToTable("Professeur");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("gestion_de_notes.Models.Eleve", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Classe", "Classe")
                        .WithMany("Eleves")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Enseigner", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Classe", "Classe")
                        .WithMany("Enseigners")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Professeur", "Professeur")
                        .WithMany("Enseigners")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Maitriser", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Matiere", "Matiere")
                        .WithMany("Maitrisers")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Professeur", "Professeur")
                        .WithMany("Maitrisers")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Note", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Eleve", "Eleve")
                        .WithMany("Notes")
                        .HasForeignKey("EleveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Examen", "Examen")
                        .WithMany("Notes")
                        .HasForeignKey("ExamenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Matiere", "Matiere")
                        .WithMany("Notes")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Professeur", "Professeur")
                        .WithMany("Notes")
                        .HasForeignKey("ProfesseurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eleve");

                    b.Navigation("Examen");

                    b.Navigation("Matiere");

                    b.Navigation("Professeur");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Posseder", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Classe", "Classe")
                        .WithMany("Posseders")
                        .HasForeignKey("ClasseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("gestion_de_notes.Models.Matiere", "Matiere")
                        .WithMany("Posseders")
                        .HasForeignKey("MatiereId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classe");

                    b.Navigation("Matiere");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Professeur", b =>
                {
                    b.HasOne("gestion_de_notes.Models.Matiere", null)
                        .WithMany("Professeurs")
                        .HasForeignKey("MatiereIdMatiere");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Classe", b =>
                {
                    b.Navigation("Eleves");

                    b.Navigation("Enseigners");

                    b.Navigation("Posseders");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Eleve", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Examen", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Matiere", b =>
                {
                    b.Navigation("Maitrisers");

                    b.Navigation("Notes");

                    b.Navigation("Posseders");

                    b.Navigation("Professeurs");
                });

            modelBuilder.Entity("gestion_de_notes.Models.Professeur", b =>
                {
                    b.Navigation("Enseigners");

                    b.Navigation("Maitrisers");

                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
